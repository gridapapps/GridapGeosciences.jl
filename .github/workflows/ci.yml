name: CI
on: [push, pull_request]
jobs:
  SeqTests:
    name: Tests ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.5'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      # - uses: actions/cache@v1
      #   env:
      #     cache-name: cache-artifacts
      #   with:
      #     path: ~/.julia/artifacts
      #     key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-test-${{ env.cache-name }}-
      #       ${{ runner.os }}-test-
      #       ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - run: julia --project=. -e 'using Pkg; Pkg.instantiate()'
      - run: julia --project=. --color=yes --check-bounds=yes test/sequential/runtests.jl
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: lcov.info
  

  MPITests:
    name: Tests ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    env:
      JULIA_MPI_BINARY: "system"
      P4EST_ROOT_DIR: "/opt/p4est/2.2/"
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.5'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - name: Cache p4est
        id: cache-p4est
        uses: actions/cache@v2
        with:
         path: ${{env.P4EST_ROOT_DIR}}
         key: ${{ runner.os }}-build-${{ env.P4EST_ROOT_DIR }}-
         restore-keys: |
           ${{ runner.os }}-build-${{ env.P4EST_ROOT_DIR }}-
           ${{ runner.os }}-build-
           ${{ runner.os }}-
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Install p4est/petsc dependencies
        run: |
           sudo apt-get update 
           sudo apt-get install -y wget gfortran g++ openmpi-bin libopenmpi-dev 
      - name: Install p4est
        if: steps.cache-p4est.outputs.cache-hit != 'true'
        run: |
          # Install p4est 2.2 from sources
          CURR_DIR=$(pwd)
          PACKAGE=p4est
          VERSION=2.2
          INSTALL_ROOT=/opt
          P4EST_INSTALL=$INSTALL_ROOT/$PACKAGE/$VERSION
          TAR_FILE=$PACKAGE-$VERSION.tar.gz
          URL="https://github.com/p4est/p4est.github.io/raw/master/release"
          ROOT_DIR=/tmp
          SOURCES_DIR=$ROOT_DIR/$PACKAGE-$VERSION
          BUILD_DIR=$SOURCES_DIR/build
          wget -q $URL/$TAR_FILE -O $ROOT_DIR/$TAR_FILE
          mkdir -p $SOURCES_DIR
          tar xzf $ROOT_DIR/$TAR_FILE -C $SOURCES_DIR --strip-components=1
          cd $SOURCES_DIR
          ./configure --prefix=$P4EST_INSTALL --without-blas --without-lapack --enable-mpi -disable-dependency-tracking
          make --quiet
          make --quiet install
          rm -rf $ROOT_DIR/$TAR_FILE $SOURCES_DIR
          cd $CURR_DIR       
      # - uses: actions/cache@v1
      #   env:
      #     cache-name: cache-artifacts
      #   with:
      #     path: ~/.julia/artifacts
      #     key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-test-${{ env.cache-name }}-
      #       ${{ runner.os }}-test-
      #       ${{ runner.os }}-
      - run: |
          julia --project=. -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: julia --project=. --color=yes --check-bounds=yes test/mpi/runtests.jl
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: lcov.info
#  docs:
#    name: Documentation
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: julia-actions/setup-julia@v1
#        with:
#          version: '1.5'
#      - run: |
#          julia --project=docs -e '
#            using Pkg
#            Pkg.develop(PackageSpec(path=pwd()))
#            Pkg.instantiate()'
##      - run: |
##          julia --project=docs -e '
##            using Documenter: doctest
##            using Gridap
##            doctest(Gridap)'
#      - run: julia --project=docs docs/make.jl
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
